version: '3.8'

services:
  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: detector-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: detector-postgres
    environment:
      POSTGRES_DB: document_detection
      POSTGRES_USER: detector
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpassword}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U detector"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: detector-api
    environment:
      - MODEL_PATH=/models/best_model.pth
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://detector:${POSTGRES_PASSWORD:-secretpassword}@postgres:5432/document_detection
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - CUDA_VISIBLE_DEVICES=0
    ports:
      - "8000:8000"
    volumes:
      - ./models:/models:ro
      - ./data:/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery worker for async tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: detector-celery-worker
    command: celery -A tasks worker --loglevel=info --concurrency=4
    environment:
      - MODEL_PATH=/models/best_model.pth
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://detector:${POSTGRES_PASSWORD:-secretpassword}@postgres:5432/document_detection
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./models:/models:ro
      - ./data:/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Celery beat for scheduled tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: detector-celery-beat
    command: celery -A tasks beat --loglevel=info
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://detector:${POSTGRES_PASSWORD:-secretpassword}@postgres:5432/document_detection
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: detector-flower
    command: celery -A tasks flower --port=5555
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "5555:5555"
    depends_on:
      - redis

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: detector-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_data:/usr/share/nginx/html/static:ro
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: detector-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - api

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: detector-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus

  # Jupyter for development and analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: detector-jupyter
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - CUDA_VISIBLE_DEVICES=0
    ports:
      - "8888:8888"
    volumes:
      - ./:/app
      - ./models:/models
      - ./data:/data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - development

  # TensorBoard for training visualization
  tensorboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: detector-tensorboard
    command: tensorboard --logdir=/app/logs --host=0.0.0.0 --port=6006
    ports:
      - "6006:6006"
    volumes:
      - ./logs:/app/logs:ro
    profiles:
      - development

  # Model training service
  training:
    build:
      context: .
      dockerfile: Dockerfile
      target: training
    container_name: detector-training
    environment:
      - CUDA_VISIBLE_DEVICES=0,1,2,3  # Multi-GPU training
      - WANDB_API_KEY=${WANDB_API_KEY}
    volumes:
      - ./:/app
      - ./models:/models
      - ./data:/data
      - ./logs:/app/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles:
      - training

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  static_data:

networks:
  default:
    name: detector-network