version: '3.8'

services:
  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: detector-postgres
    environment:
      POSTGRES_DB: document_detection
      POSTGRES_USER: detector
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpassword}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U detector"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - detector-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: detector-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - detector-network

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: detector-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
      RABBITMQ_DEFAULT_VHOST: document_detection
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - detector-network

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: detector-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_DEFAULT_BUCKETS: documents,processed,models
    ports:
      - "9000:9000"
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - detector-network

  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      target: production
    container_name: detector-api
    environment:
      - MODEL_PATH=/models
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://detector:${POSTGRES_PASSWORD:-secretpassword}@postgres:5432/document_detection
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672/document_detection
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
    ports:
      - "8000:8000"
    volumes:
      - ./models:/models:ro
      - ./data:/data
      - ./logs:/app/logs
      - ./static:/app/static
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - detector-network

  # Celery worker for async tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      target: production
    container_name: detector-celery-worker
    command: celery -A celery_app worker --loglevel=info --concurrency=4 -Q default,document_processing,model_inference
    environment:
      - MODEL_PATH=/models
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://detector:${POSTGRES_PASSWORD:-secretpassword}@postgres:5432/document_detection
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672/document_detection
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
    volumes:
      - ./models:/models:ro
      - ./data:/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
      - rabbitmq
      - minio
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - detector-network

  # Celery beat for scheduled tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      target: production
    container_name: detector-celery-beat
    command: celery -A celery_app beat --loglevel=info
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://detector:${POSTGRES_PASSWORD:-secretpassword}@postgres:5432/document_detection
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672/document_detection
      - PYTHONUNBUFFERED=1
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
      - rabbitmq
    networks:
      - detector-network

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      target: production
    container_name: detector-flower
    command: celery -A celery_app flower --port=5555 --broker=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672/document_detection
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672/document_detection
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
    networks:
      - detector-network

  # Nginx reverse proxy with load balancing
  nginx:
    image: nginx:alpine
    container_name: detector-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.enhanced.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_data:/usr/share/nginx/html/static:ro
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - detector-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: detector-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - api
    networks:
      - detector-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: detector-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - detector-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: detector-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # UI
      - "14268:14268"
      - "14250:14250"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - detector-network

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: detector-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - detector-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: detector-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - detector-network

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.2
    container_name: detector-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/logs:ro
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - detector-network

volumes:
  redis_data:
  postgres_data:
  rabbitmq_data:
  minio_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  static_data:

networks:
  detector-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16